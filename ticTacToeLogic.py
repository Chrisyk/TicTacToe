"""
Name: Christopher Ko
Team: Christopher Ko, Jas Chwala
Date: 10/23/2024
Assignment: (Assignment #4)
Due Date: 10/23/2024
About this project: Contains the logic behind the server and client side for the tic-tac-toe game
Assumptions: None
All work below was performed solely by Christopher Ko and Jas Chwala.
I used code generated by an AI tool.
"""

class TicTacToe:

    def __init__(self):
        self.gameProgress = [['.', '.', '.'], ['.', '.', '.'], ['.', '.', '.']]
        self.user = None
        self.opponent = None
    
    def check_winner(self, player):
        for i in range(3):
            if all(self.gameProgress[i][j] == player for j in range(3)):
                return True
            if all(self.gameProgress[j][i] == player for j in range(3)):
                return True
        if self.gameProgress[0][0] == player and self.gameProgress[1][1] == player and self.gameProgress[2][2] == player:
            return True
        if self.gameProgress[2][0] == player and self.gameProgress[1][1] == player and self.gameProgress[0][2] == player:
            return True
        return False
    
    def inputToUserGameValue(self, user_input):
        
        column = int(user_input[1]) - 1
        
        if user_input[0].upper() == 'A':
            row = 0
        elif user_input[0].upper() == 'B':
            row = 1
        elif user_input[0].upper() == 'C':
            row = 2

        if self.gameProgress[row][column] != '.':
            return False
        
        self.gameProgress[row][column] = self.user
        return True
    
    def inputToOpponentGameValue(self, user_input):

        column = int(user_input[1]) - 1

        if user_input[0].upper() == 'A':
            self.gameProgress[0][column] = self.opponent
        elif user_input[0].upper() == 'B':
            self.gameProgress[1][column] = self.opponent
        elif user_input[0].upper() == 'C':
            self.gameProgress[2][column] = self.opponent

        return True

    
    def __str__(self):
        board = f"   1   2   3\n"
        
        rows = ['A', 'B', 'C']
        for i, row in enumerate(self.gameProgress):
            board += f"{rows[i]}  {'   '.join(row)}\n"
        return board

class TicTacToeClient(TicTacToe):

    def __init__(self):
        super().__init__()
        self.user = '#'
        self.opponent = 'O'

    def checkGameStatus(self):
        if all(cell != '.' for row in self.gameProgress for cell in row):
            print("Draw")
            return True
        if self.check_winner(self.user):
            print("Congratulations, you won!")
            return True
        elif self.check_winner(self.opponent):
            print("Your opponent won the game!")
            return True
        
        return False

class TicTacToeServer(TicTacToe):

    def __init__(self):
        super().__init__()
        self.user = 'O'
        self.opponent = '#'

    def checkGameStatus(self):
        if all(cell != '.' for row in self.gameProgress for cell in row):
            print("Draw")
            return True
        if self.check_winner(self.user):
            print("Congratulations, you won!")
            return True
        elif self.check_winner(self.opponent):
            print("Your opponent won the game!")
            return True        
        return False

