"""
Name: Christopher Ko
Team: Christopher Ko, Jas Chwala
Date: 10/23/2024
Assignment: (Assignment #4)
Due Date: 10/23/2024
About this project: The server side creates a socket connection, where a client can connect and play tic-tac-toe.
    Once a game finishes, the server listens for a new connection.
Assumptions: assumes that the players take turns to the end of the game nicely. If other situations such as players making moves out of order or
    client/server crashing/losing connection in the middle of the game, the programâ€™s behavior can be non-deterministic. 
All work below was performed solely by Christopher Ko and Jas Chwala.
I used code generated by an AI tool.
"""

import sys
import socket
from ticTacToeLogic import TicTacToeServer

## Default paradime of creating a class for the socket binding
hostSocket = socket.socket()

hostSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

if len(sys.argv) != 2:
    print("Usage: ko_c_tictactoeserver.py <port>")
    sys.exit(1)

try:
    port = int(sys.argv[1])
except ValueError:
    print("Please provide a valid port number.")
    sys.exit(1)

hostSocket.bind((socket.gethostname(), port))

print("Waiting for opponent to connect....")

hostSocket.listen(2)

client, address = hostSocket.accept()

tts = TicTacToeServer()
opponentMove = None
serverMove = None
print(f"Receive opponent connection from {address}")    

def check_input(user_input):
    while True:
        if len(user_input) != 2:
            user_input = input("Enter a move([ABC][123]): ")
            continue
        if user_input[0].upper() not in ['A', 'B', 'C']:
            user_input = input("Enter a move([ABC][123]): ")
            continue
        try:
            column = int(user_input[1]) - 1
            if column < 0 or column >= 3:
                user_input = input("Enter a move([ABC][123]): ")
                continue
        except ValueError:
            user_input = input("Enter a move([ABC][123]): ")
            continue
        break
    return user_input

print(tts)

while True:
    if opponentMove:
        print("Wait for your opponent move (don't type anything)!")
    else:
        print("Waiting for opponent's first move. Don't type anything!")

    opponentMove = client.recv(100000).decode()

    tts.inputToOpponentGameValue(opponentMove)

    print(tts)

    if tts.checkGameStatus():
        tts = TicTacToeServer()
        opponentMove = None
        serverMove = None
        hostSocket.close()
        hostSocket = socket.socket()
        hostSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        hostSocket.bind((socket.gethostname(), port))
        print("Waiting for opponent to connect....")
        hostSocket.listen(2)
        client, address = hostSocket.accept()
        print(f"Receive opponent connection from {address}")
        print(tts) 
        continue

    if opponentMove:
        serverMove = check_input(input(f"Your opponent played {opponentMove}, your move([ABC][123]): "))
    else:
        serverMove = check_input(input("Enter a move([ABC][123]): "))

    while not tts.inputToUserGameValue(serverMove):
        print("This square has already been played (please try again).")
        serverMove = check_input(input(f"Your opponent played {opponentMove}, your move([ABC][123]): "))

    print(tts)

    client.sendall(serverMove.encode())

    if tts.checkGameStatus():
        tts = TicTacToeServer()
        opponentMove = None
        serverMove = None
        hostSocket.close()
        hostSocket = socket.socket()
        hostSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        hostSocket.bind((socket.gethostname(), port))
        print("Waiting for opponent to connect....")
        hostSocket.listen(2)
        client, address = hostSocket.accept()
        print(f"Receive opponent connection from {address}")
        print(tts) 
        continue